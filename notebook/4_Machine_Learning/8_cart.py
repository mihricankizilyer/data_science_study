# -*- coding: utf-8 -*-
"""3.4 CART.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CWHPksNhVNGmOcegMVLQkRYnw9nEDW3s

# CLASSİFİCATİON AND REGRESSİON TREE

The aim is to transform the complex structures in the data set into simple decision structures. Heterogeneous data sets are divided into homogeneous subgroups according to a specified target variable.
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import Ridge, Lasso
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn import model_selection
import matplotlib.pyplot as plt
from sklearn.linear_model import RidgeCV
from sklearn.linear_model import LassoCV
from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeRegressor

# Data Set

df = pd.read_csv("/content/Hitters.csv")

df = df.dropna()
#Missing values in it are discarded

dms = pd.get_dummies(df[['League','Division','NewLeague']])
#Categorical variables in the data set are converted to dummy variables.
# In order to get the information provided by the categorical variables better
#One hot encoding has been done.

y= df["Salary"]
#the dependent variable

X_ = df.drop(['Salary','League','Division','NewLeague'], axis = 1).astype('float64')

X = pd.concat([X_, dms[['League_N','Division_W','NewLeague_N']]], axis=1)

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.25, random_state = 42)

X_train = pd.DataFrame(X_train["Hits"])
X_test = pd.DataFrame(X_test["Hits"])

"""## Model and Forecast"""

cart_model = DecisionTreeRegressor(max_leaf_nodes = 3)
#Model object created

cart_model.fit(X_train, y_train)

X_grid = np.arange(min(np.array(X_train)), max(np.array(X_train)), 0.01)
X_grid = X_grid.reshape((len(X_grid),1))

plt.scatter(X_train, y_train, color = 'red')

plt.plot(X_grid, cart_model.predict(X_grid), color = 'blue')

plt.title('CART REGRESYON AĞACI')
plt.xlabel('Atış Sayısı(Hits)')
plt.ylabel('maaş (Salary)');

# Univariate Estimation

cart_model.predict(X_test)[0:5]

y_pred = cart_model.predict(X_test)
np.sqrt(mean_squared_error(y_test, y_pred))

# All Variables

cart_model = DecisionTreeRegressor().fit(X_train, y_train)

y_pred = cart_model.predict(X_test)
np.sqrt(mean_squared_error(y_test, y_pred))

# Model Tuning

cart_model

cart_model = DecisionTreeRegressor(max_depth = 3).fit(X_train, y_train)
y_pred = cart_model.predict(X_test)
np.sqrt(mean_squared_error(y_test, y_pred))

cart_params = {"max_depth": [2,3,4,5,10,20],
               "min_samples_split": [2,10,5,30,50,10]}

cart_model = DecisionTreeRegressor()

cart_cv_model = GridSearchCV(cart_model, cart_params, cv = 10).fit(X_train, y_train)

cart_cv_model.best_params_

#Final model

cart_tuned = DecisionTreeRegressor(max_depth = 2, min_samples_split=2).fit(X_train, y_train)

y_pred = cart_tuned.predict(X_test)
np.sqrt(mean_squared_error(y_test, y_pred))