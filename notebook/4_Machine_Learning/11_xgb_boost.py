# -*- coding: utf-8 -*-
"""3.7 XGB Boost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/134IrM8vc99vDDkoDg_tQ8wlL13t-yabe

XGBoost, GBM'in hız ve tahmin performanısını arttırmak üzere optimize edilmiş; ölçeklenebilir ve farklı platformlara entegre edilebilir halidir.

- R, Pyhton, Hadoop, Scala, Julia ile kullanılabilir.

- Ölçeklenebilirdir.

- Hızlıdır.

- Tahmin başarısı yüksektir.

- Birçok kaggle yarışmasında başarısını kanıtlamıştır.
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import Ridge, Lasso
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn import model_selection
import matplotlib.pyplot as plt
from sklearn.linear_model import RidgeCV
from sklearn.linear_model import LassoCV
from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeRegressor 
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor

df = pd.read_csv("/content/Hitters.csv")
df = df.dropna()
dms = pd.get_dummies(df[['League','Division','NewLeague']])
y= df["Salary"]

X_ = df.drop(['Salary','League','Division','NewLeague'], axis = 1).astype('float64')
X = pd.concat([X_, dms[['League_N','Division_W','NewLeague_N']]], axis=1)
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.25, random_state = 42)

"""## Model & Tahmin"""

!pip install xgboost

import xgboost

from xgboost import XGBRegressor

xgb = XGBRegressor().fit(X_train, y_train)

xgb

y_pred = xgb.predict(X_test)

np.sqrt(mean_squared_error(y_test, y_pred))

"""## Model Tuning"""

xgb = XGBRegressor()

xgb

xgb_params = {"learning_rate": [0.1,0.01,0.05],
              "max_depth": [2,3,4,5,8],
              "n_estimators": [100,200,500,1000],
              "colsample_bytree": [0.4,0.7,1]}

"""**learning_rate**
- Overfittingi engellemek adına kullanılan bir hiperparametredir.

- Daraltma adım boyun ifade eder.
"""

xgb_cv_model = GridSearchCV(xgb, xgb_params, cv=10, n_jobs = -1, verbose = 2).fit(X_train,y_train)

xgb_tuned = XGBRegressor(colsample_bytree =0.7 ,
                         learning_rate = 0.5,
                         max_depth = 2,
                         n_estimators = 100,
                         ).fit(X_train, y_train)

y_pred = xgb_tuned.predict(X_test)

np.sqrt(mean_squared_error(y_test, y_pred))