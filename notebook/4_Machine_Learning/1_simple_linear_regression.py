# -*- coding: utf-8 -*-
"""Simple Linear Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A51Wlvo47nz_JLMFPzqJcxuOUNMKwrB6

## Basit Doğrusal Regresyon

Temel amaç, bağımlı ve bağımsız değişken arasındaki ilişkiyi ifade eden doğrusal fonksiyonu bulmaktır.

### **Model**
"""

import pandas as pd
df = pd.read_csv("/Advertising.csv")
df = df.iloc[:,1:len(df)]
df.head()

# sales =bağımlı değişken 
# tv, radio, newsapaper =bağımsız değişken

df.info() # Veri seti yapısı incelenir.

import seaborn as sns
sns.jointplot(x = "TV" , y = "sales", data=df, kind="reg");

# Bir Tv harcaması değeri gelirse satışları tahmin etmeye çalışacağız. Modelleme yapılacak

from sklearn.linear_model import LinearRegression

X = df[["TV"]] #bağımsız değişken
X.head()

y = df[["sales"]] #bağımlı değişken

# LinearRegresyon modeli initiate edilir. Yani model nesnesi oluşturulur.

reg = LinearRegression()

model = reg.fit(X,y) #modeli kurmak
#x=bağımsız değişken
#y=bağımlı değişken

model

str(model)

dir(model)
#nesneinin içerisinden alınabilecek bazı bilgiler sunulmuş oldu.

model.intercept_
#Sabit
#b0 değeridir.

model.coef_
#b1 katsayısı

#rkare
model.score(X,y)
#Bağımlı değişkendeki değişikliğin bağımsız değişkenlerce açıklanma yüzdesir.

"""## **Tahmin**"""

import seaborn as sns 
import matplotlib.pyplot as plt
g = sns.regplot(df["TV"], df["sales"],ci = None, scatter_kws= {'color':'r','s':9})
g.set_title("Model Denklemi: Sales = 7.03 + Tv* 0.05")
g.set_ylabel("Satış Sayısı")
g.set_xlabel("Tv harcamaları")
plt.xlim(-10,310)
plt.ylim(bottom = 0)

model.predict([[165]])

yeni_veri = [[5],[15],[20]]

model.predict(yeni_veri)

"""## **Artıklar**"""

# MSE: Hata Kareler Ortalaması
# RMSE: Hata Kareler Ortalamsının Karekökü

gercek_y = y.head(6) 
#Satışları ifade ediyor
#Gerçek değerlerdir

tahmin_edilen_y = pd.DataFrame(model.predict(X)[0:6])

hatalar = pd.concat([gercek_y,tahmin_edilen_y], axis = 1)
hatalar.columns=["gercek_y","tahmin_edilen_y"]
hatalar

#Sol taraftakiler gerçek değerler
#Sağ taraftakiler model aracılığı ile tahmin edilen değerler.

hatalar["hata"] = hatalar["gercek_y"]-hatalar["tahmin_edilen_y"]
hatalar

hatalar["hata_kareler"] = hatalar["hata"]**2
hatalar

import numpy as np
np.mean(hatalar["hata_kareler"])
#Hata kareler ortalamsı

