# -*- coding: utf-8 -*-
"""3.9 CatBoost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1evSrohf89hyGpRbBPK_g6NDFpPLIHRiL

# Category Boosting

Kategorik değişkenleri otomatik olarak mücadele edebilen hızlı, başarılı bir diğer GBM türevi.

- Kategorik değişken desteği

- Hızlı ve ölçeklenebilir GPU desteği

- Daha başarılı tahminler

- Hızlı train ve hızlı tahmin
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import Ridge, Lasso
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn import model_selection
import matplotlib.pyplot as plt
from sklearn.linear_model import RidgeCV
from sklearn.linear_model import LassoCV
from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeRegressor 
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor

df = pd.read_csv("/content/Hitters.csv")
df = df.dropna()
dms = pd.get_dummies(df[['League','Division','NewLeague']])
y= df["Salary"]

X_ = df.drop(['Salary','League','Division','NewLeague'], axis = 1).astype('float64')
X = pd.concat([X_, dms[['League_N','Division_W','NewLeague_N']]], axis=1)
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.25, random_state = 42)

!pip install catboost

from catboost import CatBoostRegressor

"""## Model & Tahmin"""

catb_model = CatBoostRegressor().fit(X_train, y_train)

y_pred = catb_model.predict(X_test)

np.sqrt(mean_squared_error(y_test, y_pred))

"""## Model Tuning"""

catb_params = {"iterations": [200,500,1000],
               "learning_rate": [0.01,0.1],
               "depth": [3,6,8]}

catb_model = CatBoostRegressor()

catb_cv_model = GridSearchCV(catb_model, catb_params, cv=5, n_jobs = -1, verbose=2).fit(X_train,y_train)

catb_cv_model.best_params_

catb_tuned = CatBoostRegressor(depth = 3, iterations = 500, learning_rate = 0.1).fit(X_train,y_train)

y_pred = catb_tuned.predict(X_test)

np.sqrt(mean_squared_error(y_test, y_pred))

